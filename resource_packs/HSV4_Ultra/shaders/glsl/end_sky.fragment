// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2 uv;
#else
_centroid in vec2 uv;
#endif

#else

varying vec2 uv;

#endif

varying highp vec3 position;

#include "uniformShaderConstants.h"
#include "global_function.h"
#include "util.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

float fall(vec2 uv, float tall, float speed){
	uv -= vec2(3., .0);
	uv *= rotate(.6);
	uv.x +=  (TIME*.6)*speed;
    uv = tan(uv);

	return (1.-abs(uv.y * tall)-abs(uv.x)) * step(.0, uv.x);
}

float shootingstars(vec2 uv){
float result = max(max(max(max(max(
    fall((uv - vec2(.0, .1)) *5., 40., .15),
    fall((uv-vec2(.2, .15)) * 6., 60., .12)), 
    fall((uv-vec2(.4, -.2)) * 8., 80., .2)),
    fall((uv-vec2(-.5, .2)) * 3., 70., .25)),
     fall((uv-vec2(.1, .0)) * 4., 50., .18)),
     fall((uv-vec2(.3, -.25)) * 7., 30., .32));

	return clamp(result, .0, 1.);
}

highp float stars( highp vec2 p ) {
	float result = 0.;
	p *= rotate(TIME*.08);
      result += smoothstep(.8,1., noise(p*80.))*1.3;
	return pow(result, mix(0., 8., clamp(length(p*1.4), .0, 1.)));
}

highp float particle( highp vec2 p ) {
	float result = 0.;
   p += rand(floor(p*1000.));
		 result += noise(p*rotate(TIME*.05));
  return result;
}

highp float drawSpiral(highp vec2 p, float diameter){
	 float dust = particle(p*13.);
    float angle = atan(p.x, p.y);
    float lp = length(p);

	 float result = pow(1.-sin((atan(exp(lp*.6)/diameter)*20.-angle)*2.)*.3, 3.)*clamp(1.4-lp, .0, 1.);
	 return max(clamp(1.-length(p*2.6), .0, 1.)*9.*
               mix(dust, 1., clamp(1.-length(p*5.), .0, 1.)), 
               smoothstep(.2, 1.5, result)*dust);
}

highp vec3 endSky(vec3 albedo, highp vec3 p){

// calculate position
	  vec2 pos = p.xz/p.y;
     vec3 starPos = vec3(pos.y, -p.y, pos.x);
     float fadePos = step(.5, rand(floor(starPos.xz*10.)));
	  vec2 inpos = p.xz*9.;
	  vec2 outpos = inpos;
	       inpos *= rotate(-TIME*.05);
	       outpos *= rotate(TIME*.1);
    vec3 fallPos = p;
			     fallPos.xy *= rotate(-.4);
		        fallPos.x /= 80.;

// galaxy
	  float asteroid = stars(p.xz*9.);
	  float shine = exp(-length(p.xz*9.)*.3);
     vec3 inshape = drawSpiral((inpos*mat2(.1, .6, -.6, .0)), atan(2.))*vec3(.7);
     vec3 outshape = drawSpiral((outpos*.8*mat2(.2, -.6, .6, .0)), atan(1.))*vec3(.4);
     vec3 a = inshape+shine;
     vec3 b = outshape+shine;
         inshape *= asteroid;
         outshape *= asteroid*.5;

// starfield
      vec3 meteor = mix(albedo, vec3(.2, .4, .6) * 1.5, shootingstars(-p.xy)) * step(.498, abs(p.z));
     vec3 stars = mix(vec3(.0), mix(vec3(1.), mix(vec3(.7), vec3(0.,.5,1.5), noise(TIME*3.)), fadePos), step(.985, noise(starPos.xz*mix(200.,  85., fadePos))));

               stars *= 1.-meteor;
 
// result
    return max(meteor*smoothstep(.4, .5, 
         abs(p.z))*(1.-smoothstep(.2,.5, 
         abs(p.x)))*(1.-smoothstep(.2, .5, abs(p.y))), 
                 max(stars, max(max(inshape, outshape), 
                 a*b*vec3(.8, .25, 2.5)*.5)*clamp(-p.y, .0, 1.)));
}

void main()
{
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv );
#endif

#ifdef ALPHA_TEST
	if(diffuse.a < .5)
		discard;
#endif
#ifndef VANILLA
   diffuse.rgb = vec3(-.02, .0, .08);
#ifdef GALAXY
   diffuse.rgb += endSky(diffuse.rgb, position)*.6;
  #endif
#endif

  gl_FragColor = diffuse;
}
